syntax = "proto3";
package milvus.proto.plan;

option go_package = "github.com/milvus-io/milvus/pkg/v2/proto/planpb";
import "schema.proto";

enum OpType {
  Invalid = 0;
  GreaterThan = 1;
  GreaterEqual = 2;
  LessThan = 3;
  LessEqual = 4;
  Equal = 5;
  NotEqual = 6;
  PrefixMatch = 7;  // startsWith
  PostfixMatch = 8; // endsWith
  Match = 9;        // like
  Range = 10;       // for case 1 < a < b
  In = 11;          // TODO:: used for term expr
  NotIn = 12;
  TextMatch = 13;   // text match
  PhraseMatch = 14; // phrase match
  InnerMatch = 15; // substring (e.g., "%value%")
};

enum ArithOpType {
  Unknown = 0;
  Add = 1;
  Sub = 2;
  Mul = 3;
  Div = 4;
  Mod = 5;
  ArrayLength = 6;
};

enum VectorType {
  BinaryVector = 0;
  FloatVector = 1;
  Float16Vector = 2;
  BFloat16Vector = 3;
  SparseFloatVector = 4;
  Int8Vector = 5;
};

message GenericValue {
  oneof val {
    bool bool_val = 1;
    int64 int64_val = 2;
    double float_val = 3;
    string string_val = 4;
    Array array_val = 5;
  };
}

message Array {
  repeated GenericValue array = 1;
  bool same_type = 2;
  schema.DataType element_type = 3;
}

message SearchIteratorV2Info {
  string token = 1;
  uint32 batch_size = 2;
  optional float last_bound = 3;
}

message QueryInfo {
  int64 topk = 1;
  string metric_type = 3;
  string search_params = 4;
  int64 round_decimal = 5;
  int64 group_by_field_id = 6;
  bool materialized_view_involved = 7;
  int64 group_size = 8;
  bool strict_group_size = 9;
  double bm25_avgdl = 10;
  int64 query_field_id =11;
  string hints = 12;
  optional SearchIteratorV2Info search_iterator_v2_info = 13;
}

message ColumnInfo {
  int64 field_id = 1;
  schema.DataType data_type = 2;
  bool is_primary_key = 3;
  bool is_autoID = 4;
  repeated string nested_path = 5;
  bool is_partition_key = 6;
  schema.DataType element_type = 7;
  bool is_clustering_key = 8;
  bool nullable = 9;
}

message ColumnExpr {
  ColumnInfo info = 1;
}

message ExistsExpr {
  ColumnInfo info = 1;
}

message ValueExpr {
  GenericValue value = 1;
  string template_variable_name = 2;
}

message UnaryRangeExpr {
  ColumnInfo column_info = 1;
  OpType op = 2;
  GenericValue value = 3;
  string template_variable_name = 4;
  repeated GenericValue extra_values = 5;
}

message BinaryRangeExpr {
  ColumnInfo column_info = 1;
  bool lower_inclusive = 2;
  bool upper_inclusive = 3;
  GenericValue lower_value = 4;
  GenericValue upper_value = 5;
  string lower_template_variable_name = 6;
  string upper_template_variable_name = 7;
}

message CallExpr {
  string function_name = 1;
  repeated Expr function_parameters = 2;
}

message CompareExpr {
  ColumnInfo left_column_info = 1;
  ColumnInfo right_column_info = 2;
  OpType op = 3;
}

message TermExpr {
  ColumnInfo column_info = 1;
  repeated GenericValue values = 2;
  bool is_in_field = 3;
  string template_variable_name = 4;
}

message JSONContainsExpr {
  ColumnInfo column_info = 1;
  repeated GenericValue elements = 2;
  // 0: invalid
  // 1: json_contains | array_contains
  // 2: json_contains_all | array_contains_all
  // 3: json_contains_any | array_contains_any
  enum JSONOp {
    Invalid = 0;
    Contains = 1;
    ContainsAll = 2;
    ContainsAny = 3;
  }
  JSONOp op = 3;
  bool elements_same_type = 4;
  string template_variable_name = 5;
}

message NullExpr {
  ColumnInfo column_info = 1;
  enum NullOp {
    Invalid = 0;
    IsNull = 1;
    IsNotNull = 2;
  }
  NullOp op = 2;
}

message UnaryExpr {
  enum UnaryOp {
    Invalid = 0;
    Not = 1;
  };
  UnaryOp op = 1;
  Expr child = 2;
}

message BinaryExpr {
  enum BinaryOp {
    Invalid = 0;
    LogicalAnd = 1;
    LogicalOr = 2;
  }
  BinaryOp op = 1;
  Expr left = 2;
  Expr right = 3;
}

message BinaryArithOp {
  ColumnInfo column_info = 1;
  ArithOpType arith_op = 2;
  GenericValue right_operand = 3;
}

message BinaryArithExpr {
  Expr left = 1;
  Expr right = 2;
  ArithOpType op = 3;
}

message BinaryArithOpEvalRangeExpr {
  ColumnInfo column_info = 1;
  ArithOpType arith_op = 2;
  GenericValue right_operand = 3;
  OpType op = 4;
  GenericValue value = 5;
  string operand_template_variable_name = 6;
  string value_template_variable_name = 7;
}

message RandomSampleExpr {
  float sample_factor = 1;
  Expr predicate = 2;
}

message AlwaysTrueExpr {}

// 距离度量类型枚举 - 便于扩展和类型安全
enum DistanceMetric {
  DISTANCE_METRIC_UNSPECIFIED = 0;  // 未指定
  DISTANCE_METRIC_L2 = 1;           // 欧几里得距离
  DISTANCE_METRIC_IP = 2;           // 内积距离
  DISTANCE_METRIC_COSINE = 3;       // 余弦距离
  DISTANCE_METRIC_HAMMING = 4;      // 汉明距离（二进制向量）
  DISTANCE_METRIC_JACCARD = 5;      // 杰卡德距离（二进制向量）
  // 预留位置，便于未来扩展新的距离算法
}

// 距离表达式 - 支持向量距离计算
message DistanceExpr {
  Expr left_vector = 1;                     // 左侧向量表达式
  Expr right_vector = 2;                    // 右侧向量表达式
  
  // 距离度量类型：优先使用枚举，兼容字符串
  oneof metric {
    DistanceMetric metric_enum = 3;         // 推荐：使用枚举类型
    string metric_string = 4;               // 兼容：字符串类型（向后兼容）
  }
  
  map<string, string> parameters = 5;       // 算法参数，如 {"p": "2"} for Minkowski距离
  string alias = 6;                         // 可选的结果别名，如 "_distance"
  int32 version = 7;                        // 协议版本，便于兼容性处理
}

// 别名表达式 - 支持 expr AS alias 语法
message AliasedExpr {
  Expr expr = 1;           // 原始表达式
  string alias = 2;        // 别名
}

// 查询数据源定义 - 支持 from 语法
message QueryFromSource {
  string alias = 1;        // 数据源别名，如 "a", "b"
  oneof source {
    string collection_name = 2;              // 集合名称
    ExternalVectorData external_vectors = 3;  // 外部向量数据
  }
  string filter = 4;       // 过滤条件，如 "id IN [1,2,3]"
}

// 外部向量数据
message ExternalVectorData {
  repeated GenericValue vectors = 1;        // 向量数据
  int32 dimension = 2;                     // 向量维度
  VectorType vector_type = 3;              // 向量类型
  map<string, string> metadata = 4;        // 元数据，如 {"source": "external", "format": "dense"}
  int32 version = 5;                       // 数据格式版本
  string encoding = 6;                     // 编码格式，如 "float32", "int8"
}

message Expr {
  oneof expr {
    TermExpr term_expr = 1;
    UnaryExpr unary_expr = 2;
    BinaryExpr binary_expr = 3;
    CompareExpr compare_expr = 4;
    UnaryRangeExpr unary_range_expr = 5;
    BinaryRangeExpr binary_range_expr = 6;
    BinaryArithOpEvalRangeExpr binary_arith_op_eval_range_expr = 7;
    BinaryArithExpr binary_arith_expr = 8;
    ValueExpr value_expr = 9;
    ColumnExpr column_expr = 10;
    ExistsExpr exists_expr = 11;
    AlwaysTrueExpr always_true_expr = 12;
    JSONContainsExpr json_contains_expr = 13;
    CallExpr call_expr = 14;
    NullExpr null_expr = 15;
    RandomSampleExpr random_sample_expr = 16;
    DistanceExpr distance_expr = 17;     // 新增：距离表达式
    AliasedExpr aliased_expr = 18;       // 新增：别名表达式
  };
  bool is_template = 20;
}

message VectorANNS {
  VectorType vector_type = 1;
  int64 field_id = 2;
  Expr predicates = 3;
  QueryInfo query_info = 4;
  string placeholder_tag = 5;  // always be "$0"
}

message QueryPlanNode {
  Expr predicates = 1;
  bool is_count = 2;
  int64 limit = 3;
  
  // 距离查询扩展
  bool is_distance_query = 4;               // 是否为距离查询
  repeated QueryFromSource from_sources = 5; // 查询数据源列表
  repeated string output_aliases = 6;        // 输出字段别名
};

message PlanNode {
  oneof node {
    VectorANNS vector_anns = 1;
    Expr predicates = 2; // deprecated, use query instead.
    QueryPlanNode query = 4;
  }
  repeated int64 output_field_ids = 3;
  repeated string dynamic_fields = 5;
}
